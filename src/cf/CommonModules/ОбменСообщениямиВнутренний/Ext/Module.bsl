///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Только для внутреннего использования.
Функция ЭтотУзел() Экспорт
	
	Возврат ПланыОбмена.ОбменСообщениями.ЭтотУзел();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы Обмена данными.

// См. ОбменДаннымиПереопределяемый.ПриВыгрузкеДанных.
Процедура ПриВыгрузкеДанных(СтандартнаяОбработка,
								Получатель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоОтправленныхОбъектов) Экспорт
	
	Если ТипЗнч(Получатель) <> Тип("ПланОбменаСсылка.ОбменСообщениями") Тогда
		Возврат;
	КонецЕсли;
	
	СправочникиСообщений = ОбменСообщениямиПовтИсп.ПолучитьСправочникиСообщений();
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаВыборкиДанных = Новый ТаблицаЗначений;
	ТаблицаВыборкиДанных.Колонки.Добавить("Данные");
	ТаблицаВыборкиДанных.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	ЗаписьВФайл = Не ПустаяСтрока(ИмяФайлаСообщения);
	
	ЗаписьXML = Новый ЗаписьXML;
	
	Если ЗаписьВФайл Тогда
		ЗаписьXML.ОткрытьФайл(ИмяФайлаСообщения);
	Иначе
		ЗаписьXML.УстановитьСтроку();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Создаем новое сообщение
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Получатель);
	
	// Считаем количество записанных объектов.
	КоличествоОтправленныхОбъектов = 0;
	
	// Получаем выборку измененных данных.
	ВыборкаИзменений = ОбменДаннымиСервер.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
	
	Попытка
		
		Пока ВыборкаИзменений.Следующий() Цикл
			
			СтрокаТаблицы = ТаблицаВыборкиДанных.Добавить();
			СтрокаТаблицы.Данные = ВыборкаИзменений.Получить();
			
			СтрокаТаблицы.Порядок = 0;
			Для Каждого СправочникСообщений Из СправочникиСообщений Цикл
				Если ТипЗнч(СтрокаТаблицы.Данные) = ТипЗнч(СправочникСообщений.ПустаяСсылка()) Тогда
					СтрокаТаблицы.Порядок = СтрокаТаблицы.Данные.Код;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		ТаблицаВыборкиДанных.Сортировать("Порядок Возр");
		
		Для Каждого СтрокаТаблицы Из ТаблицаВыборкиДанных Цикл
			
			ВыполняетсяОтправкаСообщения = Ложь;
			
			Для Каждого СправочникСообщений Из СправочникиСообщений Цикл
				
				Если ТипЗнч(СтрокаТаблицы.Данные) = ТипЗнч(СправочникСообщений.СоздатьЭлемент()) Тогда
					ВыполняетсяОтправкаСообщения = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВыполняетсяОтправкаСообщения Тогда
				
				СтрокаТаблицы.Данные.Код = 0;
				
				// {Обработчик события: ПриОтправкеСообщения} Начало.
				ТелоСообщения = СтрокаТаблицы.Данные.ТелоСообщения.Получить();
				
				ПриОтправкеСообщения(СтрокаТаблицы.Данные.Наименование, ТелоСообщения, СтрокаТаблицы.Данные);
				
				СтрокаТаблицы.Данные.ТелоСообщения = Новый ХранилищеЗначения(ТелоСообщения);
				// {Обработчик события: ПриОтправкеСообщения} Окончание.
				
			КонецЕсли;
			
			Если ТипЗнч(СтрокаТаблицы.Данные) = Тип("УдалениеОбъекта") Тогда
				
				Если ТипЗнч(СтрокаТаблицы.Данные.Ссылка) <> Тип("СправочникСсылка.СообщенияСистемы") Тогда
					
					СтрокаТаблицы.Данные = Новый УдалениеОбъекта(Справочники.СообщенияСистемы.ПолучитьСсылку(
						СтрокаТаблицы.Данные.Ссылка.УникальныйИдентификатор()));
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Записываем данные в сообщение.
			ЗаписатьXML(ЗаписьXML, СтрокаТаблицы.Данные);
			
			КоличествоОтправленныхОбъектов = КоличествоОтправленныхОбъектов + 1;
			
		КонецЦикла;
		
		// Завершаем запись сообщения
		ЗаписьСообщения.ЗакончитьЗапись();
		ДанныеСообщения = ЗаписьXML.Закрыть();
		
	Исключение
		
		ЗаписьСообщения.ПрерватьЗапись();
		ЗаписьXML.Закрыть();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// См. ОбменДаннымиПереопределяемый.ПриЗагрузкеДанных.
Процедура ПриЗагрузкеДанных(СтандартнаяОбработка,
								Отправитель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоПолученныхОбъектов) Экспорт
	
	Если ТипЗнч(Отправитель) <> Тип("ПланОбменаСсылка.ОбменСообщениями") Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаВМоделиСервиса = Неопределено;
	Если РаботаВМоделиСервисаПовтИсп.ЭтоРазделеннаяКонфигурация() Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	КонецЕсли;
	
	СправочникиСообщений = ОбменСообщениямиПовтИсп.ПолучитьСправочникиСообщений();
	
	СтандартнаяОбработка = Ложь;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Если Не ПустаяСтрока(ДанныеСообщения) Тогда
		ЧтениеXML.УстановитьСтроку(ДанныеСообщения);
	Иначе
		ЧтениеXML.ОткрытьФайл(ИмяФайлаСообщения);
	КонецЕсли;
	
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML, ДопустимыйНомерСообщения.Больший);
	
	ПараметрыРезервнойКопии = ОбменДаннымиСервер.ПараметрыРезервнойКопии(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	УдалитьРегистрациюИзменений = Не ПараметрыРезервнойКопии.ВосстановленаРезервнаяКопия;
	
	Если УдалитьРегистрациюИзменений Тогда
		
		// Удаляем регистрацию изменений для узла отправителя сообщения.
		ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
		
	КонецЕсли;
	
	// Считаем сколько объектов прочитали.
	КоличествоПолученныхОбъектов = 0;
	
	Попытка
		
		СообщениеОбменаМожетБытьПринятоЧастично = КорреспондентПоддерживаетЧастичноеПолучениеСообщенийОбмена(Отправитель);
		СообщениеОбменаПринятоЧастично = Ложь;
		
		// Читаем данные из сообщения
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
			
			// Читаем очередное значение
			Данные = ПрочитатьXML(ЧтениеXML);
			
			КоличествоПолученныхОбъектов = КоличествоПолученныхОбъектов + 1;
			
			ВыполняетсяПолучениеСообщения = Ложь;
			Для Каждого СправочникСообщений Из СправочникиСообщений Цикл
				Если ТипЗнч(Данные) = ТипЗнч(СправочникСообщений.СоздатьЭлемент()) Тогда
					ВыполняетсяПолучениеСообщения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВыполняетсяПолучениеСообщения Тогда
				
				Если Не Данные.ЭтоНовый() Тогда
					Продолжить; // Загружаем только новые сообщения.
				КонецЕсли;
				
				// {Обработчик: ПриПолученииСообщения} Начало
				ТелоСообщения = Данные.ТелоСообщения.Получить();
				
				ПриПолученииСообщения(Данные.Наименование, ТелоСообщения, Данные);
				
				Данные.ТелоСообщения = Новый ХранилищеЗначения(ТелоСообщения);
				// {Обработчик: ПриПолученииСообщения} Окончание
				
				Если Не Данные.ЭтоНовый() Тогда
					Продолжить; // Загружаем только новые сообщения.
				КонецЕсли;
				
				Данные.УстановитьНовыйКод();
				Данные.Отправитель = ЧтениеСообщения.Отправитель;
				Данные.Получатель = ЭтотУзел();
				Данные.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
				
			ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ПодпискиПолучателей") Тогда
				
				Данные.Отбор["Получатель"].Значение = ЧтениеСообщения.Отправитель;
				
				Для Каждого СтрокаНабораЗаписей Из Данные Цикл
					
					СтрокаНабораЗаписей.Получатель = ЧтениеСообщения.Отправитель;
					
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
				
				Если ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.СообщенияСистемы") Тогда
					
					Для Каждого СправочникСообщений Из СправочникиСообщений Цикл
						
						ПодменаСсылки = СправочникСообщений.ПолучитьСсылку(Данные.Ссылка.УникальныйИдентификатор());
						Если ОбщегоНазначения.СсылкаСуществует(ПодменаСсылки) Тогда
							
							Данные = Новый УдалениеОбъекта(ПодменаСсылки);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбластьДанных = -1;
			Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
				
				Ссылка = Данные.Ссылка;
				Если Не ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
					Продолжить;
				КонецЕсли;
				Если РаботаВМоделиСервисаПовтИсп.ЭтоРазделеннаяКонфигурация() И РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(Ссылка.Метаданные(), РаботаВМоделиСервиса.РазделительВспомогательныхДанных()) Тогда
					ОбластьДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Ссылка, РаботаВМоделиСервиса.РазделительВспомогательныхДанных());
				КонецЕсли;
				
			Иначе
				
				Если РаботаВМоделиСервисаПовтИсп.ЭтоРазделеннаяКонфигурация() И РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(Данные.Метаданные(), РаботаВМоделиСервиса.РазделительВспомогательныхДанных()) Тогда
					ОбластьДанных = Данные[РаботаВМоделиСервиса.РазделительВспомогательныхДанных()];
				КонецЕсли;
				
			КонецЕсли;
			
			ТребуетсяВосстановлениеРазделения = Ложь;
			Если ОбластьДанных <> -1 И НЕ ВыполняетсяПолучениеСообщения Тогда
				
				Если МодульРаботаВМоделиСервиса.ОбластьДанныхЗаблокирована(ОбластьДанных) Тогда
					// Сообщение для заблокированной области не может быть принято.
					Если СообщениеОбменаМожетБытьПринятоЧастично Тогда
						СообщениеОбменаПринятоЧастично = Истина;
						Продолжить;
					Иначе
						ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось выполнить обмен сообщениями по причине: область данных %1 заблокирована.'"),
							ОбластьДанных);
					КонецЕсли;
				КонецЕсли;
				
				ТребуетсяВосстановлениеРазделения = Истина;
				РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
				
			КонецЕсли;
			
			// В случае коллизии изменений приоритет отдаем текущей информационной базе (за исключением входящих УдалениеОбъекта
			// от
			// сообщений, получателем которых выступает ИБ-корреспондент).
			Если ТипЗнч(Данные) <> Тип("УдалениеОбъекта") И ПланыОбмена.ИзменениеЗарегистрировано(ЧтениеСообщения.Отправитель, Данные) Тогда
				Если ТребуетсяВосстановлениеРазделения Тогда
					РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;
			Данные.Записать();
			
			Если ТребуетсяВосстановлениеРазделения Тогда
				РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СообщениеОбменаПринятоЧастично Тогда
			// Если в сообщении обмена данными присутствовали сообщения, которые не могли
			// быть приняты - требуется, чтобы отправитель продолжал их отправлять при
			// формировании следующих сообщений обмена.
			ЧтениеСообщения.ПрерватьЧтение();
		Иначе
			ЧтениеСообщения.ЗакончитьЧтение();
		КонецЕсли;
		
		ОбменДаннымиСервер.ПриВосстановленииРезервнойКопии(ПараметрыРезервнойКопии);
		
		ЧтениеXML.Закрыть();
		
	Исключение
		ЧтениеСообщения.ПрерватьЧтение();
		ЧтениеXML.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.МонопольныйРежим = Ложь;
	Обработчик.Процедура = "ОбменСообщениямиВнутренний.УстановитьКодЭтойКонечнойТочки";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.78";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбменСообщениямиВнутренний.ПеренестиНастройкиТранспортаОбменаСообщениями";
	
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.СообщенияСистемы.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	МассивСправочников = ОбменСообщениямиПовтИсп.ПолучитьСправочникиСообщений();
	Для Каждого СправочникСообщений Из МассивСправочников Цикл
		Типы.Добавить(СправочникСообщений.ПустаяСсылка().Метаданные());
	КонецЦикла;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов.
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	МассивВерсий.Добавить("2.1.1.7");
	МассивВерсий.Добавить("2.1.1.8");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменСообщениями", МассивВерсий);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Устанавливает код этой конечной точки, если не установлен.
// 
Процедура УстановитьКодЭтойКонечнойТочки() Экспорт
	
	Если ПустаяСтрока(КодЭтогоУзла()) Тогда
		
		ЭтаКонечнаяТочка = ЭтотУзел().ПолучитьОбъект();
		ЭтаКонечнаяТочка.Код = Строка(Новый УникальныйИдентификатор());
		ЭтаКонечнаяТочка.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Переносит настройки транспорта обмена сообщениями в новый регистр.
//
Процедура ПеренестиНастройкиТранспортаОбменаСообщениями() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиТранспорта.УзелИнформационнойБазы КАК КонечнаяТочка,
	|	НастройкиТранспорта.WSURLВебСервиса КАК АдресВебСервиса,
	|	НастройкиТранспорта.WSИмяПользователя КАК ИмяПользователя,
	|	НастройкиТранспорта.WSЗапомнитьПароль КАК ЗапомнитьПароль
	|ИЗ
	|	РегистрСведений.УдалитьНастройкиТранспортаОбмена КАК НастройкиТранспорта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ОбменСообщениями КАК ОбменСообщениями
	|		ПО (ОбменСообщениями.Ссылка = НастройкиТранспорта.УзелИнформационнойБазы)
	|ГДЕ
	|	(ВЫРАЗИТЬ(НастройкиТранспорта.WSURLВебСервиса КАК СТРОКА(100))) <> """"");
	
	ТаблицаНастройки = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Попытка
		Для Каждого СтрокаНастройки Из ТаблицаНастройки Цикл
			НаборЗаписейНовый = РегистрыСведений.НастройкиТранспортаОбменаСообщениями.СоздатьНаборЗаписей();
			НаборЗаписейНовый.Отбор.КонечнаяТочка.Установить(СтрокаНастройки.КонечнаяТочка);
			
			ЗаписьНастройки = НаборЗаписейНовый.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНастройки, СтрокаНастройки);
			
			НаборЗаписейНовый.Записать(Истина);
			
			МенеджерЗаписиСтарый = РегистрыСведений.УдалитьНастройкиТранспортаОбмена.СоздатьМенеджерЗаписи();
			МенеджерЗаписиСтарый.УзелИнформационнойБазы = СтрокаНастройки.КонечнаяТочка;
			МенеджерЗаписиСтарый.Прочитать();
			
			МенеджерЗаписиСтарый.WSURLВебСервиса   = "";
			МенеджерЗаписиСтарый.WSЗапомнитьПароль = Ложь;
			МенеджерЗаписиСтарый.WSИмяПользователя = "";
			
			МенеджерЗаписиСтарый.Записать(Истина);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции.

// Обработчик регламентного задания для отправки и получения сообщений системы.
//
Процедура ОтправитьИПолучитьСообщенияПоРегламентномуЗаданию() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаИПолучениеСообщенийСистемы);
	
	ОтправитьИПолучитьСообщения(Ложь);
	
КонецПроцедуры

// Выполняет отправку и получение сообщений системы.
//
// Параметры:
//  Отказ - Булево. Флаг отказа. Поднимается в случае возникновения ошибок в процессе выполнения операции.
//
Процедура ОтправитьИПолучитьСообщения(Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполнитьОтправкуИПолучениеСообщенийЧерезWebСервис(Отказ);
	
	ОбработатьОчередьСообщенийСистемы();
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОбработатьОчередьСообщенийСистемы(Отбор = Неопределено) Экспорт

    УстановитьПривилегированныйРежим(Истина);

    Если РаботаВМоделиСервиса.РазделениеВключено() И РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных() Тогда

        ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЭтойПодсистемы(),
                УровеньЖурналаРегистрации.Информация,,,
                НСтр("ru = 'Обработка очереди сообщений системы запущена из сеанса с установленными
                      |значениями разделителей. Обработка будет производиться только для сообщений,
                      |сохраненных в разделенном справочнике, в элементах со значениями разделителей,
                      |совпадающих со значениями разделителей сеанса.'"));

        ОбрабатыватьСообщенияВНеразделенныхДанных = Ложь;

    Иначе

        ОбрабатыватьСообщенияВНеразделенныхДанных = Истина;

    КонецЕсли;

    МодульРаботаВМоделиСервиса = Неопределено;
    Если РаботаВМоделиСервисаПовтИсп.ЭтоРазделеннаяКонфигурация() Тогда
        МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
    КонецЕсли;

    ОбработчикиСообщений = ОбработчикиСообщений();

    ТекстЗапроса = "";
    СправочникиСообщений = ОбменСообщениямиПовтИсп.ПолучитьСправочникиСообщений();
    Для Каждого СправочникСообщений Из СправочникиСообщений Цикл

        ПолноеИмяСправочника = СправочникСообщений.ПустаяСсылка().Метаданные().ПолноеИмя();
        ЭтоНеразделенныйСправочник = Не РаботаВМоделиСервисаПовтИсп.ЭтоРазделеннаяКонфигурация()
			ИЛИ Не РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(ПолноеИмяСправочника, РаботаВМоделиСервиса.РазделительВспомогательныхДанных());

        Если ЭтоНеразделенныйСправочник И Не ОбрабатыватьСообщенияВНеразделенныхДанных Тогда
            Продолжить;
        КонецЕсли;

        Если Не ПустаяСтрока(ТекстЗапроса) Тогда

            ТекстЗапроса = ТекстЗапроса + "
            |
            |ОБЪЕДИНИТЬ ВСЕ
            |"

        КонецЕсли;

        Подзапрос =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            "ВЫБРАТЬ
            |    ТаблицаСообщений.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
            |    ТаблицаСообщений.Ссылка КАК Ссылка,
            |    ТаблицаСообщений.Код КАК Код,
            |    ТаблицаСообщений.Отправитель.Заблокирована КАК КонечнаяТочкаЗаблокирована
            |ИЗ
            |    %1 КАК ТаблицаСообщений
            |ГДЕ
            |    ТаблицаСообщений.Получатель = &Получатель
            |    И (НЕ ТаблицаСообщений.Заблокировано)
            |    [Отбор]"
            , ПолноеИмяСправочника);

        Если ЭтоНеразделенныйСправочник Тогда
            Подзапрос = СтрЗаменить(Подзапрос, "ТаблицаСообщений.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных", "-1 КАК ОбластьДанных");
        КонецЕсли;

        ТекстЗапроса = ТекстЗапроса + Подзапрос;

    КонецЦикла;

    СтрокаОтбора = ?(Отбор = Неопределено, "", "И ТаблицаСообщений.Ссылка В(&Отбор)");

    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Отбор]", СтрокаОтбора);

    ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 100
    |    ВложенныйЗапрос.ОбластьДанных,
    |    ВложенныйЗапрос.Ссылка,
    |    ВложенныйЗапрос.Код,
    |    ВложенныйЗапрос.КонечнаяТочкаЗаблокирована
    |ИЗ
    |    (" +  ТекстЗапроса + ") КАК ВложенныйЗапрос
    |
    |УПОРЯДОЧИТЬ ПО
    |    Код";

    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Получатель", ЭтотУзел());
    Запрос.УстановитьПараметр("Отбор", Отбор);
    Запрос.Текст = ТекстЗапроса;

    РезультатЗапроса = РаботаВМоделиСервиса.ВыполнитьЗапросВнеТранзакции(Запрос);

    Выборка = РезультатЗапроса.Выбрать();

    Пока Выборка.Следующий() Цикл

        Попытка
            ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
        Исключение
            Продолжить; // переходим дальше
        КонецПопытки;

        // Проверка блокировки области.
        Если МодульРаботаВМоделиСервиса <> Неопределено
                И Выборка.ОбластьДанных <> -1
                И МодульРаботаВМоделиСервиса.ОбластьДанныхЗаблокирована(Выборка.ОбластьДанных) Тогда

            // Область заблокирована, перейти к следующей записи.
            РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
            Продолжить;
        КонецЕсли;

        Попытка

            НачатьТранзакцию();
            Попытка
                ОбъектСообщения = Выборка.Ссылка.ПолучитьОбъект();
                Если ОбъектСообщения = Неопределено Тогда
                    ОтменитьТранзакцию();
                    Продолжить;
                КонецЕсли;
                СчетчикПопыток = ОбъектСообщения.КоличествоПопытокОбработкиСообщения + 1;
                Если СчетчикПопыток > 3 Тогда
                    Если НЕ ЗначениеЗаполнено(ОбъектСообщения.ПодробноеПредставлениеОшибки) Тогда
                        ОбъектСообщения.ПодробноеПредставлениеОшибки = НСтр("ru = 'Исчерпано количество попыток обработки сообщения.'");
                    КонецЕсли;
                    ОбъектСообщения.Заблокировано = Истина;
                Иначе
                    ОбъектСообщения.КоличествоПопытокОбработкиСообщения = СчетчикПопыток;
                КонецЕсли;
                РаботаВМоделиСервиса.ЗаписатьВспомогательныеДанные(ОбъектСообщения);
                ОбъектСообщения.Прочитать();
                ЗафиксироватьТранзакцию();
            Исключение
                ОтменитьТранзакцию();
                ВызватьИсключение;
            КонецПопытки;

            Если ОбъектСообщения.Заблокировано Тогда
                РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);

                ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЭтойПодсистемы(),
                        УровеньЖурналаРегистрации.Ошибка,,,
                        СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                            НСтр("ru = 'Исчерпано количество попыток обработки сообщения %1'"),
                            ОбъектСообщения.Наименование));

                Продолжить;
            КонецЕсли;

            ЗаголовокСообщения = Новый Структура("КаналСообщений, Отправитель", ОбъектСообщения.Наименование, ОбъектСообщения.Отправитель);

            НайденныеСтроки = ОбработчикиСообщений.НайтиСтроки(Новый Структура("Канал", ЗаголовокСообщения.КаналСообщений));

            СообщениеОбработано = Истина;

            // Обрабатываем сообщение
            Попытка

                Если Выборка.КонечнаяТочкаЗаблокирована Тогда
                    ОбъектСообщения.Заблокировано = Истина;
                    ВызватьИсключение НСтр("ru = 'Попытка обработки сообщения, полученного от заблокированной конечной точки.'");
                КонецЕсли;

                Если НайденныеСтроки.Количество() = 0 Тогда
                    ОбъектСообщения.Заблокировано = Истина;
                    ВызватьИсключение НСтр("ru = 'Не назначен обработчик для сообщения.'");
                КонецЕсли;

                Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл

                    СтрокаТаблицы.Обработчик.ОбработатьСообщение(ЗаголовокСообщения.КаналСообщений, ОбъектСообщения.ТелоСообщения.Получить(), ЗаголовокСообщения.Отправитель);

                    Если ТранзакцияАктивна() Тогда
                        Пока ТранзакцияАктивна() Цикл
                            ОтменитьТранзакцию();
                        КонецЦикла;
                        ОбъектСообщения.Заблокировано = Истина;
                        ВызватьИсключение НСтр("ru = 'В обработчике сообщения не была зафиксирована транзакция.'");
                    КонецЕсли;

                КонецЦикла;
            Исключение

                Пока ТранзакцияАктивна() Цикл
                    ОтменитьТранзакцию();
                КонецЦикла;

                СообщениеОбработано = Ложь;

                ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
                ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЭтойПодсистемы(),
                        УровеньЖурналаРегистрации.Ошибка,,,
                        СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                            НСтр("ru = 'Ошибка обработки сообщения %1: %2'"),
                            ЗаголовокСообщения.КаналСообщений, ПодробноеПредставлениеОшибки));
            КонецПопытки;

            Если СообщениеОбработано Тогда

                // Удаляем сообщение
                Если ЗначениеЗаполнено(ОбъектСообщения.Отправитель)
                    И ОбъектСообщения.Отправитель <> ЭтотУзел() Тогда

                    ОбъектСообщения.ОбменДанными.Получатели.Добавить(ОбъектСообщения.Отправитель);
                    ОбъектСообщения.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;

                КонецЕсли;

                // Наличие ссылок на справочник не должно препятствовать или замедлять удаление элементов справочника.
                ОбъектСообщения.ОбменДанными.Загрузка = Истина;
                РаботаВМоделиСервиса.УдалитьВспомогательныеДанные(ОбъектСообщения);
				
			Иначе
				
				ОбъектСообщения.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки;
				РаботаВМоделиСервиса.ЗаписатьВспомогательныеДанные(ОбъектСообщения);

            КонецЕсли;

            Если ОбрабатыватьСообщенияВНеразделенныхДанных И РаботаВМоделиСервиса.РазделениеВключено() И РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных() Тогда

                ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                    НСтр("ru = 'После обработки сообщения канала %1 не было выключено разделение сеанса.'"),
                    ЗаголовокСообщения.КаналСообщений);

                ЗаписьЖурналаРегистрации(
                    СобытиеЖурналаРегистрацииЭтойПодсистемы(),
                    УровеньЖурналаРегистрации.Ошибка,
                    ,
                    ,
                    ТекстСообщенияОбОшибке);

                РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);

            КонецЕсли;

        Исключение
            ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЭтойПодсистемы(),
                    УровеньЖурналаРегистрации.Ошибка,,,
                    ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        КонецПопытки;

        РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);

    КонецЦикла;

КонецПроцедуры

// Только для внутреннего использования.
Процедура ОбработатьОчередьСообщенийСистемыВФоне(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	ОбработатьОчередьСообщенийСистемы(ПараметрыПроцедуры["ЗагруженныеСообщения"]);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура УстановитьВедущуюКонечнуюТочкуНаСторонеОтправителя(Отказ, НастройкиПодключенияОтправителя, КонечнаяТочка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаСообщенияОбОшибке = "";
	
	WSПрокси = ПолучитьWSПрокси(НастройкиПодключенияОтправителя, СтрокаСообщенияОбОшибке);
	
	Если WSПрокси = Неопределено Тогда
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаВедущейКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		КонечнаяТочкаОбъект = КонечнаяТочка.ПолучитьОбъект();
		КонечнаяТочкаОбъект.Ведущая = Ложь;
		КонечнаяТочкаОбъект.Записать();
		
		// Обновляем настройки подключения.
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("КонечнаяТочка", КонечнаяТочка);
		
		СтруктураЗаписи.Вставить("АдресВебСервиса", НастройкиПодключенияОтправителя.WSURLВебСервиса);
		СтруктураЗаписи.Вставить("ИмяПользователя", НастройкиПодключенияОтправителя.WSИмяПользователя);
		СтруктураЗаписи.Вставить("Пароль",          НастройкиПодключенияОтправителя.WSПароль);
		СтруктураЗаписи.Вставить("ЗапомнитьПароль", Истина);
		
		// добавляем запись в РС
		РегистрыСведений.НастройкиТранспортаОбменаСообщениями.ДобавитьЗапись(СтруктураЗаписи);
		
		// Устанавливаем ведущую конечную точку на стороне получателя.
		WSПрокси.SetLeadingEndPoint(КонечнаяТочкаОбъект.Код, КодЭтогоУзла());
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаВедущейКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура УстановитьВедущуюКонечнуюТочкуНаСторонеПолучателя(КодЭтойКонечнойТочки, КодВедущейКонечнойТочки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПланыОбмена.ОбменСообщениями.НайтиПоКоду(КодЭтойКонечнойТочки) <> ЭтотУзел() Тогда
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Заданы неверные параметры подключения к конечной точке. Параметры подключения указывают на другую конечную точку.'");
		СтрокаСообщенияОбОшибкеДляЖурналаРегистрации = НСтр("ru = 'Заданы неверные параметры подключения к конечной точке.
			|Параметры подключения указывают на другую конечную точку.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаВедущейКонечнойТочки(),
				УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибкеДляЖурналаРегистрации);
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		УзелКонечнойТочки = ПланыОбмена.ОбменСообщениями.НайтиПоКоду(КодВедущейКонечнойТочки);
		
		Если УзелКонечнойТочки.Пустая() Тогда
			
			ВызватьИсключение НСтр("ru = 'Конечная точка в базе-корреспонденте не обнаружена.'");
			
		КонецЕсли;
		УзелКонечнойТочкиОбъект = УзелКонечнойТочки.ПолучитьОбъект();
		УзелКонечнойТочкиОбъект.Ведущая = Истина;
		УзелКонечнойТочкиОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаВедущейКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ВыполнитьПодключениеКонечнойТочкиНаСторонеПолучателя(Отказ, Код, Наименование, НастройкиПодключенияПолучателя) Экспорт
	
	ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными();
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		// Создаем/обновляем узел плана обмена, который соответствует подключаемой конечной точке.
		УзелКонечнойТочки = ПланыОбмена.ОбменСообщениями.НайтиПоКоду(Код);
		Если УзелКонечнойТочки.Пустая() Тогда
			УзелКонечнойТочкиОбъект = ПланыОбмена.ОбменСообщениями.СоздатьУзел();
			УзелКонечнойТочкиОбъект.Код = Код;
		Иначе
			УзелКонечнойТочкиОбъект = УзелКонечнойТочки.ПолучитьОбъект();
			УзелКонечнойТочкиОбъект.НомерПринятого = 0;
		КонецЕсли;
		УзелКонечнойТочкиОбъект.Наименование = Наименование;
		УзелКонечнойТочкиОбъект.Ведущая = Истина;
		УзелКонечнойТочкиОбъект.Записать();
		
		// Обновляем настройки подключения.
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("КонечнаяТочка", УзелКонечнойТочкиОбъект.Ссылка);
		
		СтруктураЗаписи.Вставить("АдресВебСервиса", НастройкиПодключенияПолучателя.WSURLВебСервиса);
		СтруктураЗаписи.Вставить("ИмяПользователя", НастройкиПодключенияПолучателя.WSИмяПользователя);
		СтруктураЗаписи.Вставить("Пароль",          НастройкиПодключенияПолучателя.WSПароль);
		СтруктураЗаписи.Вставить("ЗапомнитьПароль", Истина);
		
		// добавляем запись в РС
		РегистрыСведений.НастройкиТранспортаОбменаСообщениями.ДобавитьЗапись(СтруктураЗаписи);
		
		// Устанавливаем признак использования регламентного задания.
		РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.ОтправкаИПолучениеСообщенийСистемы, Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ВыполнитьОбновлениеНастроекПодключенияКонечнойТочки(Отказ, КонечнаяТочка, НастройкиПодключенияОтправителя, НастройкиПодключенияПолучателя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаСообщенияОбОшибке = "";
	
	ВерсииКорреспондента = ВерсииКорреспондента(НастройкиПодключенияОтправителя);
	ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	
	Если ВерсияКорреспондента_2_0_1_6 Тогда
		WSПрокси = ПолучитьWSПрокси_2_0_1_6(НастройкиПодключенияОтправителя, СтрокаСообщенияОбОшибке);
	Иначе
		WSПрокси = ПолучитьWSПрокси(НастройкиПодключенияОтправителя, СтрокаСообщенияОбОшибке);
	КонецЕсли;
	
	Если WSПрокси = Неопределено Тогда
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ВерсияКорреспондента_2_0_1_6 Тогда
			WSПрокси.TestConnectionRecipient(СериализаторXDTO.ЗаписатьXDTO(НастройкиПодключенияПолучателя), КодЭтогоУзла());
		Иначе
			WSПрокси.TestConnectionRecipient(ЗначениеВСтрокуВнутр(НастройкиПодключенияПолучателя), КодЭтогоУзла());
		КонецЕсли;
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	НачатьТранзакцию();
	Попытка
		
		// Обновляем настройки подключения.
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("КонечнаяТочка", КонечнаяТочка);
		
		СтруктураЗаписи.Вставить("АдресВебСервиса", НастройкиПодключенияОтправителя.WSURLВебСервиса);
		СтруктураЗаписи.Вставить("ИмяПользователя", НастройкиПодключенияОтправителя.WSИмяПользователя);
		СтруктураЗаписи.Вставить("Пароль",          НастройкиПодключенияОтправителя.WSПароль);
		СтруктураЗаписи.Вставить("ЗапомнитьПароль", Истина);
		
		// добавляем запись в РС
		РегистрыСведений.НастройкиТранспортаОбменаСообщениями.ОбновитьЗапись(СтруктураЗаписи);
		
		Если Не КонечнаяТочка = ПланыОбмена.ОбменСообщениями.ЭтотУзел() Тогда
			Если ВерсияКорреспондента_2_0_1_6 Тогда
				WSПрокси.UpdateConnectionSettings(КодЭтогоУзла(), СериализаторXDTO.ЗаписатьXDTO(НастройкиПодключенияПолучателя));
			Иначе
				WSПрокси.UpdateConnectionSettings(КодЭтогоУзла(), ЗначениеВСтрокуВнутр(НастройкиПодключенияПолучателя));
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования.
Функция КодЭтогоУзла() Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел(), "Код");
	
КонецФункции

// Только для внутреннего использования.
Функция НаименованиеЭтогоУзла() Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел(), "Наименование");
	
КонецФункции

// Только для внутреннего использования.
Функция ВсеПолучатели() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбменСообщениями.Ссылка КАК Получатель
	|ИЗ
	|	ПланОбмена.ОбменСообщениями КАК ОбменСообщениями
	|ГДЕ
	|	ОбменСообщениями.Ссылка <> &ЭтотУзел";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел());
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");
КонецФункции

// Только для внутреннего использования.
Процедура СериализоватьДанныеВПоток(ВыборкаДанных, Поток) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Root");
	
	Для Каждого Ссылка Из ВыборкаДанных Цикл
		
		Данные = Ссылка.ПолучитьОбъект();
		Данные.Код = 0;
		
		// {Обработчик события: ПриОтправкеСообщения} Начало.
		ТелоСообщения = Данные.ТелоСообщения.Получить();
		
		ПриОтправкеСообщения(Данные.Наименование, ТелоСообщения, Данные);
		
		Данные.ТелоСообщения = Новый ХранилищеЗначения(ТелоСообщения);
		// {Обработчик события: ПриОтправкеСообщения} Окончание.
		
		ЗаписатьXML(ЗаписьXML, Данные);
		
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Поток = ЗаписьXML.Закрыть();
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура СериализоватьДанныеИзПотока(Отправитель, Поток, ЗагруженныеОбъекты, ДанныеПрочитаныЧастично) Экспорт
	
	МодульРаботаВМоделиСервиса = Неопределено;
	Если РаботаВМоделиСервисаПовтИсп.ЭтоРазделеннаяКонфигурация() Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	КонецЕсли;
	
	ДанныеМогутБытьПрочитаныЧастично = КорреспондентПоддерживаетЧастичноеПолучениеСообщенийОбмена(Отправитель);
	
	ЗагруженныеОбъекты = Новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(Поток);
		ЧтениеXML.Прочитать(); // узел "Root"
		ЧтениеXML.Прочитать(); // узел объекта
	Исключение
		ЧтениеXML.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	НачатьТранзакцию();
	Попытка
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
			
			Данные = ПрочитатьXML(ЧтениеXML);
			
			Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
				
				ВызватьИсключение НСтр("ru = 'Передача объекта УдалениеОбъекта через механизм быстрых сообщений не поддерживается.'");
				
			Иначе
				
				Если Не Данные.ЭтоНовый() Тогда
					Продолжить; // Загружаем только новые сообщения.
				КонецЕсли;
				
				// {Обработчик: ПриПолученииСообщения} Начало
				ТелоСообщения = Данные.ТелоСообщения.Получить();
				
				ПриПолученииСообщения(Данные.Наименование, ТелоСообщения, Данные);
				
				Данные.ТелоСообщения = Новый ХранилищеЗначения(ТелоСообщения);
				// {Обработчик: ПриПолученииСообщения} Окончание
				
				Если Не Данные.ЭтоНовый() Тогда
					Продолжить; // Загружаем только новые сообщения.
				КонецЕсли;
				
				Данные.Отправитель = Отправитель;
				Данные.Получатель = ЭтотУзел();
				Данные.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
				
			КонецЕсли;
			
			ТребуетсяВосстановлениеРазделения = Ложь;
			Если РаботаВМоделиСервисаПовтИсп.ЭтоРазделеннаяКонфигурация() И РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(Данные.Метаданные(), РаботаВМоделиСервиса.РазделительВспомогательныхДанных()) Тогда
				
				ОбластьДанных = Данные[РаботаВМоделиСервиса.РазделительВспомогательныхДанных()];
				
				Если МодульРаботаВМоделиСервиса.ОбластьДанныхЗаблокирована(ОбластьДанных) Тогда
					// Сообщение для заблокированной области не может быть принято.
					Если ДанныеМогутБытьПрочитаныЧастично Тогда
						ДанныеПрочитаныЧастично = Истина;
						Продолжить;
					Иначе
						ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось выполнить обмен сообщениями по причине: область данных %1 заблокирована.'"),
							ОбластьДанных);
					КонецЕсли;
				КонецЕсли;
				
				ТребуетсяВосстановлениеРазделения = Истина;
				РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
				
			КонецЕсли;
			
			// В случае коллизии изменений приоритет отдаем текущей информационной базе.
			Если ПланыОбмена.ИзменениеЗарегистрировано(Отправитель, Данные) Тогда
				Если ТребуетсяВосстановлениеРазделения Тогда
					РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Данные.ОбменДанными.Отправитель = Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;
			
			Данные.УстановитьНовыйКод();
			Данные.Записать();
			
			Если ТребуетсяВосстановлениеРазделения Тогда
				РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
			КонецЕсли;
			
			ЗагруженныеОбъекты.Добавить(Данные.Ссылка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЧтениеXML.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Только для внутреннего использования.
Функция ПолучитьWSПрокси(СтруктураНастроек, СтрокаСообщенияОбОшибке = "", Таймаут = 60) Экспорт
	
	СтруктураНастроек.Вставить("WSURLПространстваИменСервиса", "http://www.1c.ru/SSL/MessageExchange");
	СтруктураНастроек.Вставить("WSИмяСервиса",                 "MessageExchange");
	СтруктураНастроек.Вставить("WSТаймаут", Таймаут);
	
	Возврат ОбменДаннымиСервер.ПолучитьWSПроксиПоПараметрамПодключения(СтруктураНастроек, СтрокаСообщенияОбОшибке);
КонецФункции

// Только для внутреннего использования.
Функция ПолучитьWSПрокси_2_0_1_6(СтруктураНастроек, СтрокаСообщенияОбОшибке = "", Таймаут = 60)
	
	СтруктураНастроек.Вставить("WSURLПространстваИменСервиса", "http://www.1c.ru/SSL/MessageExchange_2_0_1_6");
	СтруктураНастроек.Вставить("WSИмяСервиса",                 "MessageExchange_2_0_1_6");
	СтруктураНастроек.Вставить("WSТаймаут", Таймаут);
	
	Возврат ОбменДаннымиСервер.ПолучитьWSПроксиПоПараметрамПодключения(СтруктураНастроек, СтрокаСообщенияОбОшибке);
КонецФункции

// Проверяет поддержку информационной базой корреспондента частичного получения сообщений
//  обмена данными при обмене сообщениями (если не поддерживает - частичное получение сообщений
//  обмена на стороне этой информационной базы не должно использоваться).
//
// Параметры:
//  Отправитель - ПланОбменаСсылка.ОбменСообщениями.
//
// Возвращаемое значение: Булево.
//
Функция КорреспондентПоддерживаетЧастичноеПолучениеСообщенийОбмена(Знач Корреспондент)
	
	ВерсииКорреспондента = ВерсииКорреспондента(Корреспондент);
	Возврат (ВерсииКорреспондента.Найти("2.1.1.8") <> Неопределено);
	
КонецФункции

// Возвращает массив номеров версий, поддерживаемых интерфейсом корреспондента для подсистемы ОбменСообщениями.
// 
// Параметры:
//   Корреспондент - Структура, ПланОбменаСсылка. Узел плана обмена, который соответствует информационной
//                 базе-корреспонденту.
//
// Возвращаемое значение:
//   Массив номеров версий, поддерживаемых интерфейсом корреспондента.
//
Функция ВерсииКорреспондента(Знач Корреспондент)
	
	Если ТипЗнч(Корреспондент) = Тип("Структура") Тогда
		СтруктураНастроек = Корреспондент;
	Иначе
		СтруктураНастроек = РегистрыСведений.НастройкиТранспортаОбменаСообщениями.НастройкиТранспортаWS(Корреспондент);
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("URL",      СтруктураНастроек.WSURLВебСервиса);
	ПараметрыПодключения.Вставить("UserName", СтруктураНастроек.WSИмяПользователя);
	ПараметрыПодключения.Вставить("Password", СтруктураНастроек.WSПароль);
	
	Возврат ОбщегоНазначения.ПолучитьВерсииИнтерфейса(ПараметрыПодключения, "ОбменСообщениями");
	
КонецФункции

// Только для внутреннего использования.
Функция СобытиеЖурналаРегистрацииПодключениеКонечнойТочки() Экспорт
	
	Возврат НСтр("ru = 'Обмен сообщениями.Подключение конечной точки'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Только для внутреннего использования.
Функция СобытиеЖурналаРегистрацииУстановкаВедущейКонечнойТочки() Экспорт
	
	Возврат НСтр("ru = 'Обмен сообщениями.Установка ведущей конечной точки'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Только для внутреннего использования.
Функция СобытиеЖурналаРегистрацииЭтойПодсистемы() Экспорт
	
	Возврат НСтр("ru = 'Обмен сообщениями'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Только для внутреннего использования.
Функция НаименованиеЭтогоУзлаПоУмолчанию() Экспорт
	
	Возврат ?(РаботаВМоделиСервиса.РазделениеВключено(), Метаданные.Синоним, ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы());
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции.

// Только для внутреннего использования.
Процедура ВыполнитьОтправкуИПолучениеСообщенийЧерезWebСервис(Отказ)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбменСообщениями.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменСообщениями КАК ОбменСообщениями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиТранспортаОбменаСообщениями КАК НастройкиТранспорта
	|		ПО ОбменСообщениями.Ссылка = НастройкиТранспорта.КонечнаяТочка
	|ГДЕ
	|	ОбменСообщениями.Ссылка <> &ЭтотУзел
	|	И НЕ ОбменСообщениями.Ведущая
	|	И НЕ ОбменСообщениями.ПометкаУдаления
	|	И НЕ ОбменСообщениями.Заблокирована";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел());
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивУзлов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Загрузка данных от всех конечных точек.
	Для Каждого Получатель Из МассивУзлов Цикл
		
		Отказ1 = Ложь;
		
		ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
		ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
		ПараметрыОбмена.ВыполнятьЗагрузку = Истина;
		ПараметрыОбмена.ВыполнятьВыгрузку = Ложь;
		
		ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Получатель, ПараметрыОбмена, Отказ1);
		
		Отказ = Отказ ИЛИ Отказ1;
		
	КонецЦикла;
	
	// Выгрузка данных для всех конечных точек.
	Для Каждого Получатель Из МассивУзлов Цикл
		
		Отказ1 = Ложь;
		
		ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
		ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
		ПараметрыОбмена.ВыполнятьЗагрузку = Ложь;
		ПараметрыОбмена.ВыполнятьВыгрузку = Истина;
		
		ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Получатель, ПараметрыОбмена, Отказ1);
		
		Отказ = Отказ ИЛИ Отказ1;
		
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ВыполнитьПодключениеКонечнойТочкиНаСторонеОтправителя(Отказ,
														НастройкиПодключенияОтправителя,
														НастройкиПодключенияПолучателя,
														КонечнаяТочка,
														НаименованиеКонечнойТочкиПолучателя,
														НаименованиеКонечнойТочкиОтправителя) Экспорт
	
	ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными();
	
	СтрокаСообщенияОбОшибке = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВерсииКорреспондента = ВерсииКорреспондента(НастройкиПодключенияОтправителя);
	ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	
	Если ВерсияКорреспондента_2_0_1_6 Тогда
		WSПрокси = ПолучитьWSПрокси_2_0_1_6(НастройкиПодключенияОтправителя, СтрокаСообщенияОбОшибке);
	Иначе
		WSПрокси = ПолучитьWSПрокси(НастройкиПодключенияОтправителя, СтрокаСообщенияОбОшибке);
	КонецЕсли;
	
	Если WSПрокси = Неопределено Тогда
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если ВерсияКорреспондента_2_0_1_6 Тогда
			WSПрокси.TestConnectionRecipient(СериализаторXDTO.ЗаписатьXDTO(НастройкиПодключенияПолучателя), КодЭтогоУзла());
		Иначе
			WSПрокси.TestConnectionRecipient(ЗначениеВСтрокуВнутр(НастройкиПодключенияПолучателя), КодЭтогоУзла());
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если ВерсияКорреспондента_2_0_1_6 Тогда
		ПараметрыКонечнойТочки = СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetIBParameters(НаименованиеКонечнойТочкиПолучателя));
	Иначе
		ПараметрыКонечнойТочки = ЗначениеИзСтрокиВнутр(WSПрокси.GetIBParameters(НаименованиеКонечнойТочкиПолучателя));
	КонецЕсли;
	
	УзелКонечнойТочки = ПланыОбмена.ОбменСообщениями.НайтиПоКоду(ПараметрыКонечнойТочки.Код);
	
	Если Не УзелКонечнойТочки.Пустая() Тогда
		Отказ = Истина;
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Конечная точка уже подключена к информационной базе; наименование точки: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелКонечнойТочки, "Наименование"));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		// Устанавливаем наименование этой точки при необходимости.
		Если ПустаяСтрока(НаименованиеЭтогоУзла()) Тогда
			
			ЭтотУзелОбъект = ЭтотУзел().ПолучитьОбъект();
			ЭтотУзелОбъект.Наименование = ?(ПустаяСтрока(НаименованиеКонечнойТочкиОтправителя), НаименованиеЭтогоУзлаПоУмолчанию(), НаименованиеКонечнойТочкиОтправителя);
			ЭтотУзелОбъект.Записать();
			
		КонецЕсли;
		
		// Создаем узел плана обмена, который соответствует подключаемой конечной точке.
		УзелКонечнойТочкиОбъект = ПланыОбмена.ОбменСообщениями.СоздатьУзел();
		УзелКонечнойТочкиОбъект.Код = ПараметрыКонечнойТочки.Код;
		УзелКонечнойТочкиОбъект.Наименование = ПараметрыКонечнойТочки.Наименование;
		УзелКонечнойТочкиОбъект.Записать();
		
		// Обновляем настройки подключения.
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("КонечнаяТочка", УзелКонечнойТочкиОбъект.Ссылка);
		
		СтруктураЗаписи.Вставить("АдресВебСервиса", НастройкиПодключенияОтправителя.WSURLВебСервиса);
		СтруктураЗаписи.Вставить("ИмяПользователя", НастройкиПодключенияОтправителя.WSИмяПользователя);
		СтруктураЗаписи.Вставить("Пароль",          НастройкиПодключенияОтправителя.WSПароль);
		СтруктураЗаписи.Вставить("ЗапомнитьПароль", Истина);
		
		// добавляем запись в РС
		РегистрыСведений.НастройкиТранспортаОбменаСообщениями.ДобавитьЗапись(СтруктураЗаписи);
		
		ПараметрыЭтойТочки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотУзел(), "Код, Наименование");
		
		// Выполняем подключение конечной точки на стороне получателя.
		Если ВерсияКорреспондента_2_0_1_6 Тогда
			WSПрокси.ConnectEndPoint(ПараметрыЭтойТочки.Код, ПараметрыЭтойТочки.Наименование, СериализаторXDTO.ЗаписатьXDTO(НастройкиПодключенияПолучателя));
		Иначе
			WSПрокси.ConnectEndPoint(ПараметрыЭтойТочки.Код, ПараметрыЭтойТочки.Наименование, ЗначениеВСтрокуВнутр(НастройкиПодключенияПолучателя));
		КонецЕсли;
		
		// Устанавливаем признак использования регламентного задания.
		РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.ОтправкаИПолучениеСообщенийСистемы, Истина);
		
		КонечнаяТочка = УзелКонечнойТочкиОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		КонечнаяТочка = Неопределено;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования.
Функция ОбработчикиСообщений()
	
	Результат = НоваяТаблицаОбработчиковСообщений();
	
	ИнтеграцияПодсистемБСП.ПриОпределенииОбработчиковКаналовСообщений(Результат);
	
	ОбменСообщениямиПереопределяемый.ПолучитьОбработчикиКаналовСообщений(Результат);
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования.
Функция НоваяТаблицаОбработчиковСообщений()
	
	Обработчики = Новый ТаблицаЗначений;
	Обработчики.Колонки.Добавить("Канал");
	Обработчики.Колонки.Добавить("Обработчик");
	
	Возврат Обработчики;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий отправки и получения сообщений.

Процедура ПриОтправкеСообщения(Знач КаналСообщений, ТелоСообщения, ОбъектСообщения)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями") Тогда
		МодульСообщенияВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("СообщенияВМоделиСервиса");
		МодульСообщенияВМоделиСервиса.ПриОтправкеСообщения(КаналСообщений, ТелоСообщения, ОбъектСообщения);
	КонецЕсли;
	
	ОбменСообщениямиПереопределяемый.ПриОтправкеСообщения(КаналСообщений, ТелоСообщения);
	
КонецПроцедуры

Процедура ПриПолученииСообщения(Знач КаналСообщений, ТелоСообщения, ОбъектСообщения)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями") Тогда
		МодульСообщенияВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("СообщенияВМоделиСервиса");
		МодульСообщенияВМоделиСервиса.ПриПолученииСообщения(КаналСообщений, ТелоСообщения, ОбъектСообщения);
	КонецЕсли;
	
	ОбменСообщениямиПереопределяемый.ПриПолученииСообщения(КаналСообщений, ТелоСообщения);
	
КонецПроцедуры

#КонецОбласти
